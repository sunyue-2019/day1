#100-Days-Of-ML-Code Day1 数据预处理
#1.导入必要的库
import  numpy as np   #numpy 包含一些数学计算函数
import pandas as pd   #pandas用于导入和管理数据集
import sklearn as sl
#2.导入数据集
data=pd.read_csv('D:/100-Days-Of-ML-Code/Data.csv')
#查看数据集data的前5行
print(data.head())
#取除最后一列外的所有列
X=data.iloc[:,:-1].values
#取第二列所有元素
Y=data.iloc[:,2].values
print("X=")
print(X)
print("Y=")
print(Y)
#3.处理丢失数据
#利用sklearn.preprocessing库中的Imputer实现用每一列的平均值或中间值替换掉该列的缺失值
from sklearn.preprocessing import Imputer
#sklearn.preprocessing.Imputer(missing_values='NAN'（缺失值，可以为整数或者NAN）,strategy='mean'（用特征列的均值替换）,axis=0（默认代表列，若为1代表行）,verbose=0,copy=True（不在原数据集上修改，若为False，就地修改）)
imp=Imputer(missing_values=np.nan,strategy='mean',axis=0)
#求1~3列的中值
imp=imp.fit(X[:,1:3])
#标准化，用均值取代缺失值
X[:,1:3]=imp.transform(X[:,1:3])
print(X)
#4.解析分类数据
#把像“Yes,No”这种不能直接用于模型数学结算的值解析为数字
from sklearn.preprocessing import LabelEncoder
#利用LabelEncoder对不连续的数字或者文本进行编号
lab_X=LabelEncoder()
#把国家名转换为数字并进行标准化
X[:,0]=lab_X.fit_transform(X[:,0])
print(X)
#创建虚拟变量
#OneHotEncoder（一位有效编码，在任意时候只有一位有效）用于将表示的分类的数据扩维
from sklearn.preprocessing import OneHotEncoder
ohe=OneHotEncoder(categorical_features=[0])
X=ohe.fit_transform(X).toarray()
#5.把数据集分割为训练集和测试集，比例一般为8:2
from sklearn.model_selection import train_test_split
#测试集占20%,random_state是为了保证程序每次运行都分割一样的训练集和测试集，否则确定模型和初始参数以后程序每次运行都会得到不同的准确率，无法调参
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0,20,random_state=0)
#6.特征缩放
使用特征标准化或者Z值归一化解决
from sklearn.preprocessing import StandardScaler
sc_X=StandardScaler()
sc_X.mean_     #计算均值
sc_X.scale_    #计算方差
#进行数据归一化
X_train=sc_X.fit_transform(X_train)
X_test=sc_X.fit_transform(X_test)
